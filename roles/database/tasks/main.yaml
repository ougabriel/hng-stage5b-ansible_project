- name: Include webserver role vars
  include_vars:
    file: ../webserver/vars.yml

- name: Install required packages
  apt:
    name:
      - python3-psycopg2
      - postgresql
    state: present

- name: Set Python interpreter
  set_fact:
    ansible_python_interpreter: /usr/bin/python3

- name: Ensure PostgreSQL is running
  service:
    name: postgresql
    state: started
    enabled: yes

- name: Backup pg_hba.conf
  copy:
    src: /etc/postgresql/14/main/pg_hba.conf
    dest: /etc/postgresql/14/main/pg_hba.conf.bak
    remote_src: yes

- name: Change local authentication to md5
  lineinfile:
    path: /etc/postgresql/14/main/pg_hba.conf
    regexp: '^local\s+all\s+postgres\s+peer'
    line: 'local   all             postgres                                md5'
    state: present

- name: Change host authentication to md5
  lineinfile:
    path: /etc/postgresql/14/main/pg_hba.conf
    regexp: '^host\s+all\s+all\s+127.0.0.1/32\s+trust'
    line: 'host    all             all             127.0.0.1/32            md5'
    state: present

- name: Change IPv6 host authentication to md5
  lineinfile:
    path: /etc/postgresql/14/main/pg_hba.conf
    regexp: '^host\s+all\s+all\s+::1/128\s+trust'
    line: 'host    all             all             ::1/128                 md5'
    state: present

- name: Restart PostgreSQL to apply changes
  service:
    name: postgresql
    state: restarted

- name: Check if .env.local file exists
  stat:
    path: /opt/stage_5b/.env.local
  register: env_file

- name: Debug .env.local file existence
  debug:
    msg: "The .env.local file exists: {{ env_file.stat.exists }}"

- name: Read environment variables from .env.local
  shell: |
    if [ -f /opt/stage_5b/.env.local ]; then
      set -a
      source /opt/stage_5b/.env.local
      echo "$DB_USERNAME"
      echo "$DB_PASSWORD"
      echo "$DB_DATABASE"
      echo "$DB_HOST"
      echo "$DB_PORT"
      set +a
    else
      echo "Error: .env.local file not found" >&2
      exit 1
    fi
  register: env_vars
  when: env_file.stat.exists
  changed_when: false
  failed_when: "'Error' in env_vars.stderr"

- name: Debug entire env_vars
  debug:
    var: env_vars

- name: Ensure env_vars contains expected output
  fail:
    msg: "Environment variables were not correctly read from .env.local"
  when: env_vars.stdout_lines is not defined or env_vars.stdout_lines | length < 5

- name: Debug environment variables
  debug:
    msg: |
      DB_USERNAME: {{ env_vars.stdout_lines[0] | default('N/A') }}
      DB_PASSWORD: {{ env_vars.stdout_lines[1] | default('N/A') }}
      DB_DATABASE: {{ env_vars.stdout_lines[2] | default('N/A') }}
      DB_HOST: {{ env_vars.stdout_lines[3] | default('N/A') }}
      DB_PORT: {{ env_vars.stdout_lines[4] | default('N/A') }}

- name: Create PostgreSQL user
  postgresql_user:
    name: "{{ env_vars.stdout_lines[0] }}"  # DB_USERNAME
    password: "{{ env_vars.stdout_lines[1] }}"  # DB_PASSWORD
    state: present
    login_user: postgres
    login_password: "{{ env_vars.stdout_lines[1] }}"  # DB_PASSWORD

- name: Create PostgreSQL database
  postgresql_db:
    name: "{{ env_vars.stdout_lines[2] }}"  # DB_DATABASE
    owner: "{{ env_vars.stdout_lines[0] }}"  # DB_USERNAME
    state: present
    login_user: postgres
    login_password: "{{ env_vars.stdout_lines[1] }}"  # DB_PASSWORD
    encoding: UTF-8

- name: Grant all privileges on database to user
  postgresql_privs:
    db: "{{ env_vars.stdout_lines[2] }}"  # DB_DATABASE
    role: "{{ env_vars.stdout_lines[0] }}"  # DB_USERNAME
    privs: ALL
    type: database
    login_user: postgres
    login_password: "{{ env_vars.stdout_lines[1] }}"  # DB_PASSWORD

